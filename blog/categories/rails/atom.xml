<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rails | povess notes]]></title>
  <link href="http://bluengreen.github.io/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://bluengreen.github.io/"/>
  <updated>2013-09-21T18:14:32-05:00</updated>
  <id>http://bluengreen.github.io/</id>
  <author>
    <name><![CDATA[Phillip Novess]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[DRY up your controllers with base controllers]]></title>
    <link href="http://bluengreen.github.io/blog/2013/09/21/cleanup-rails-controllers-with-base-controllers/"/>
    <updated>2013-09-21T04:44:00-05:00</updated>
    <id>http://bluengreen.github.io/blog/2013/09/21/cleanup-rails-controllers-with-base-controllers</id>
    <content type="html"><![CDATA[<p>Controllers are just basic ruby classes that inherit from ActionController::Base. This means you can manage your controllers just as you would manage a ruby class. DRY up your controllers by moving supporting methods into a base controller.</p>

<!-- more -->


<p>Obviously, we can move methods into the Application controller. But we may not need these methods across the whole application. A perfect example of this is when we are creating a site that has public and private sections of the site.</p>

<p>Example 1:</p>

<p>``` ruby
class ApplicationController &lt; ActionController::Base
  before_filter :authenticate_user!</p>

<p>  # other methods
end
```</p>

<p>The problem with this is we would have to do a skip_before_filter on every controller we want public. Or conversely we would have to call the before_filter on all private pages.</p>

<p>I prefer to create a namespace for the private sections by creating a directory in Rails root app/controllers. Let&rsquo;s call this directory admin. Then create a new controller within the admin directory for users.</p>

<p>Example 2:</p>

<p>``` ruby
class Admin::UsersController &lt; ActionController::Base
  before_filter :authenticate_user!</p>

<p>  # other methods
end
```</p>

<p>Now we can access the protected controller by going to <a href="http://localhost:3000/admin/users">http://localhost:3000/admin/users</a> But now we still have to apply a before_filter on any added controllers within admin. I think a better way to handle this is to create a base controller within the admin directory that the admin controllers can inherit from.</p>

<p>Example 3:</p>

<p>``` ruby
class Admin::BaseController &lt; ActionController::Base
  before_filter :authenticate_user!</p>

<p>  # other methods
end</p>

<p>class Admin::UsersController &lt; Admin::BaseController
  # other methods
end
```</p>

<p>This has the added benefit of being able to add any methods that can be used across the admin in a shared controller.</p>

<p>However, there is no reason we must limit ourselves to only the admin. I find many times I have methods I need to use across specific controllers. This is a perfect opportunity to DRY up those controllers, by namespacing and creating a base controller.</p>

<p>Example 4:</p>

<p>``` ruby
class Reports::BaseController &lt; ActionController::Base
  # methods for all reports
end</p>

<p>class Reports::StandardController &lt; Reports::BaseController
  # other methods
end</p>

<p>class Reports::CustomController &lt; Reports::BaseController
  # other methods
end
```</p>

<p>This is nothing groundbreaking or revolutionary. But like many things in ruby and Rails, simple and basic saves the day.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac OSX 10.8 Rails installation]]></title>
    <link href="http://bluengreen.github.io/blog/2013/09/21/mac-osx-10-dot-8-rails-installation/"/>
    <updated>2013-09-21T04:36:00-05:00</updated>
    <id>http://bluengreen.github.io/blog/2013/09/21/mac-osx-10-dot-8-rails-installation</id>
    <content type="html"><![CDATA[<h2>Dev workstation setup</h2>

<p>These instructions are for Mac OSX 10.8 Mountain Lion. Following these instructions will prepare your workstation for developing in Ruby on Rails.</p>

<!-- more -->


<p>```</p>

<p> Mac OS X 10.8 installation steps</p>

<h1>====================================================================================</h1>

<h1>** many commands require sudo but many do not</h1>

<h1>** this installation documentation is meant to describe a user level install </h1>

<h1>** where sudo is needed it is explicitly referenced </h1>

<h1>** pay attention to not add sudo where it is NOT listed</h1>

<h1>** it will affect the permissions negatively  </h1>

<h1>====================================================================================</h1>

<h1>prepare mac for installations and configuration</h1>

<h1>changes have been made to 10.8, that require </h1>

<h1>modification in order to configure the way we want</h1>

<h1>make the ~/Library directory visible so we can move bbedit customizations into it</h1>

<p>chflags nohidden ~/Library/</p>

<h1>make directories for our projects</h1>

<p>mkdir -p ~/Sites/shared/</p>

<h1>install xcode &ndash; needed for compilers and command line tools </h1>

<h1>**this requires an apple developer account </h1>

<h1>use the App Store app</h1>

<h1>run the installer &ndash; the commandline tools contain the compilers </h1>

<h1>install the command line tools from within the xcode application</h1>

<h1>from xode menu select preferences then select downloads tab, install commandline tools </h1>

<h1>** Apple no longer ships an x client, which is required for certain libs being compiled </h1>

<h1>** install xquartz to meet these requuirements</h1>

<p><a href="http://static.macosforge.org/xquartz/downloads/SL/XQuartz-2.7.2.dmg">http://static.macosforge.org/xquartz/downloads/SL/XQuartz-2.7.2.dmg</a></p>

<h1>install homebrew  - <a href="http://mxcl.github.com/homebrew/">http://mxcl.github.com/homebrew/</a></h1>

<p>ruby &lt;(curl -fsSkL raw.github.com/mxcl/homebrew/go)</p>

<h1>check brew config</h1>

<p>brew doctor</p>

<h1>update brew</h1>

<p>brew update</p>

<h1>install packages</h1>

<p>brew tap homebrew/dupes
brew install wget
brew install git
brew install autoconf automake apple-gcc42
brew install ghostscript
brew install imagemagick
brew install mutt
brew install node
brew install redis
brew install bash-completion</p>

<p>brew install bash-completion</p>

<h1>configure git</h1>

<p>git config &mdash;global color.ui true
git config &mdash;global core.editor bbedit
git config &mdash;global color.branch auto
git config &mdash;global color.diff auto
git config &mdash;global color.status auto</p>

<h1>create new github account for user @ <a href="http://github.com">http://github.com</a></h1>

<h1>create keys for new computer / user</h1>

<p> ssh-keygen -t rsa -C &ldquo;&lt;your_email>&rdquo;
 pbcopy &lt; ~/.ssh/id_rsa.pub</p>

<h1>copy new keys to new user account @ <a href="http://github.com">http://github.com</a></h1>

<p><a href="https://help.github.com/articles/generating-ssh-keys">https://help.github.com/articles/generating-ssh-keys</a></p>

<h1>install mysql</h1>

<p>brew install mysql 
unset TMPDIR
mysql_install_db &mdash;verbose &mdash;user=<code>whoami</code> &mdash;basedir=&ldquo;$(brew &mdash;prefix mysql)&rdquo; &mdash;datadir=/usr/local/var/mysql &mdash;tmpdir=/tmp
mysql.server start</p>

<h1>make mysql start automatically (optional)</h1>

<p>mkdir -p ~/Library/LaunchAgents
cp /usr/local/Cellar/mysql/5.6.12/homebrew.mxcl.mysql.plist ~/Library/LaunchAgents/
launchctl load -w ~/Library/LaunchAgents/homebrew.mxcl.mysql.plist</p>

<h1>set mysql password</h1>

<p>mysqladmin -u root password NEWPASSWORD</p>

<h1>install RVM and rubies </h1>

<p>curl -L <a href="https://get.rvm.io">https://get.rvm.io</a> | bash -s stable &mdash;ruby
rvm requirements</p>

<h1>may or may not need these commands</h1>

<h1>depending on your system</h1>

<h1>rvm pkg install openssl</h1>

<h1>export CPPFLAGS=-I/opt/X11/include</h1>

<h1>CC=/usr/local/bin/gcc-4.2 rvm reinstall 1.8.7</h1>

<h1>CC=/usr/local/bin/gcc-4.2 rvm install 1.9.3</h1>

<h1>install ruby</h1>

<p>rvm install 1.9.3</p>

<h1>use this ruby as default and create gemset</h1>

<p>rvm use 1.9.3@lin &mdash;create &mdash;default</p>

<h1>create and edit .bash_profile for your environment</h1>

<p>cat > ~/.bash_profile &lt;&lt;-ENDOFMESSAGE</p>

<h6>#</h6>

<h1>GIT completions &amp; highlighted prompt </h1>

<h6>#</h6>

<p>if [ -f <code>brew --prefix</code>/etc/bash_completion ]; then
 . <code>brew --prefix</code>/etc/bash_completion
fi</p>

<p>GIT_PS1_SHOWDIRTYSTATE=true
PS1=&lsquo;[\033[32m]\u@\h[\033[00m]:[\033[34m]\w[\033[31m]$(__git_ps1)[\033[00m]\$ &rsquo;</p>

<h6>#</h6>

<h1>Bash ls colors</h1>

<h6>#</h6>

<p>export CLICOLOR=1
export LSCOLORS=DxGxcxdxCxegedabagacad</p>

<h6>#</h6>

<h1>alias</h1>

<h6>#</h6>

<p>alias ll=&lsquo;ls -l&rsquo;
alias la=&lsquo;ls -la&rsquo;</p>

<h6>#</h6>

<h2>git</h2>

<p>alias g=&lsquo;git status&rsquo;
alias gg=&lsquo;git log&rsquo;
alias gst=&lsquo;git status&rsquo;</p>

<p>alias gb=&lsquo;git branch&rsquo;
alias gba=&lsquo;git branch -a&rsquo;</p>

<p>alias gc=&lsquo;git commit -v&rsquo;
alias gca=&lsquo;git commit -v -a&rsquo;
alias gce=&ldquo;git commit &mdash;amend&rdquo; # fix last commit message
alias gco=&lsquo;git checkout&rsquo;</p>

<p>alias gd=&lsquo;git diff | bbedit&rsquo;
alias gdm=&lsquo;git diff master&rsquo;</p>

<p>alias gl=&lsquo;git pull&rsquo;
alias gp=&lsquo;git push&rsquo;</p>

<h6>#</h6>

<h1>update path for mysql and pear</h1>

<h6>#</h6>

<p>export PATH=/usr/local/mysql/bin:/usr/local/share/npm/bin:$PATH</p>

<h6>#</h6>

<h1>RVM &ndash; for managing versions of ruby</h1>

<h6>#</h6>

<p>[[ -s &ldquo;~/.rvm/scripts/rvm&rdquo; ]] &amp;&amp; source &ldquo;~/.rvm/scripts/rvm&rdquo; # Load RVM into a shell session <em>as a function</em></p>

<p>ENDOFMESSAGE</p>

<h1>prevent gems from installing docs</h1>

<p>echo &lsquo;gem: &mdash;no-rdoc &mdash;no-ri&rsquo; >> ~/.gemrc</p>

<h1>install gems </h1>

<p>gem install bundler
gem install mysql2</p>

<h4>if you have issues with mysql2 </h4>

<h4>** mysql 5.6.12 </h4>

<h1>change the mysql_config file </h1>

<h1>then try installing again</h1>

<h1><a href="http://stackoverflow.com/questions/5919727/bundle-install-problem-mysql-h-is-missing">http://stackoverflow.com/questions/5919727/bundle-install-problem-mysql-h-is-missing</a></h1>

<h1><a href="http://www.randomactsofsentience.com/2013/05/gem-install-mysql2-missing-mysqlh-on-os.html">http://www.randomactsofsentience.com/2013/05/gem-install-mysql2-missing-mysqlh-on-os.html</a></h1>

<p>vi /usr/local/Cellar/mysql/5.6.12/bin/mysql_config
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RAILS: Eager Loading in activerecord ignores select method]]></title>
    <link href="http://bluengreen.github.io/blog/2013/09/21/rails-eager-loading-in-activerecord-ignores-select-method/"/>
    <updated>2013-09-21T03:25:00-05:00</updated>
    <id>http://bluengreen.github.io/blog/2013/09/21/rails-eager-loading-in-activerecord-ignores-select-method</id>
    <content type="html"><![CDATA[<p>If your trying to use the select method in Activercord, and you are finding that your select does not work, your issue may be with eager loading. It turns out that when you eager load with the includes method, the select method is completely ignored.</p>

<!-- more -->


<h2>This does not work</h2>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>example_controller.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'> <span class="vi">@posts</span> <span class="o">=</span> <span class="no">Post</span><span class="o">.</span><span class="n">select</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">title</span><span class="p">,</span> <span class="n">categories</span><span class="o">.</span><span class="n">name</span> <span class="no">AS</span> <span class="n">category_name</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;          .joins(:category)</span>
</span><span class='line'><span class="sr">          .includes(:category)</span>
</span><span class='line'><span class="sr">          .where(&quot;categories.name=&#39;News&#39;&quot;)</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt; @grouped_posts = @posts.group_by(:category_name)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Solution</h2>

<p>Remove the includes.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>example_controller.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>  <span class="vi">@posts</span> <span class="o">=</span> <span class="no">Post</span><span class="o">.</span><span class="n">select</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">title</span><span class="p">,</span> <span class="n">categories</span><span class="o">.</span><span class="n">name</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;           .joins(:category)</span>
</span><span class='line'><span class="sr">           .where(&quot;categories.name=&#39;News&#39;&quot;)</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  @grouped_posts = @posts.group_by(:category_name)   &lt;br/</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Beware</h2>

<p>Beware that this can also happen when using gems that use eager loading. Making it harder to notice that is the issue.</p>

<p>Hope this saves you some time.</p>
]]></content>
  </entry>
  
</feed>
