<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Activecontroller | povess notes]]></title>
  <link href="http://bluengreen.github.io/blog/categories/activecontroller/atom.xml" rel="self"/>
  <link href="http://bluengreen.github.io/"/>
  <updated>2013-09-21T18:00:39-05:00</updated>
  <id>http://bluengreen.github.io/</id>
  <author>
    <name><![CDATA[Phillip Novess]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[DRY up your controllers with base controllers]]></title>
    <link href="http://bluengreen.github.io/blog/2013/09/21/cleanup-rails-controllers-with-base-controllers/"/>
    <updated>2013-09-21T04:44:00-05:00</updated>
    <id>http://bluengreen.github.io/blog/2013/09/21/cleanup-rails-controllers-with-base-controllers</id>
    <content type="html"><![CDATA[<p>Controllers are just basic ruby classes that inherit from ActionController::Base. This means you can manage your controllers just as you would manage a ruby class. DRY up your controllers by moving supporting methods into a base controller.</p>

<!-- more -->


<p>Obviously, we can move methods into the Application controller. But we may not need these methods across the whole application. A perfect example of this is when we are creating a site that has public and private sections of the site.</p>

<p>Example 1:</p>

<p>``` ruby
class ApplicationController &lt; ActionController::Base
  before_filter :authenticate_user!</p>

<p>  # other methods
end
```</p>

<p>The problem with this is we would have to do a skip_before_filter on every controller we want public. Or conversely we would have to call the before_filter on all private pages.</p>

<p>I prefer to create a namespace for the private sections by creating a directory in Rails root app/controllers. Let&rsquo;s call this directory admin. Then create a new controller within the admin directory for users.</p>

<p>Example 2:</p>

<p>``` ruby
class Admin::UsersController &lt; ActionController::Base
  before_filter :authenticate_user!</p>

<p>  # other methods
end
```</p>

<p>Now we can access the protected controller by going to <a href="http://localhost:3000/admin/users">http://localhost:3000/admin/users</a> But now we still have to apply a before_filter on any added controllers within admin. I think a better way to handle this is to create a base controller within the admin directory that the admin controllers can inherit from.</p>

<p>Example 3:</p>

<p>``` ruby
class Admin::BaseController &lt; ActionController::Base
  before_filter :authenticate_user!</p>

<p>  # other methods
end</p>

<p>class Admin::UsersController &lt; Admin::BaseController
  # other methods
end
```</p>

<p>This has the added benefit of being able to add any methods that can be used across the admin in a shared controller.</p>

<p>However, there is no reason we must limit ourselves to only the admin. I find many times I have methods I need to use across specific controllers. This is a perfect opportunity to DRY up those controllers, by namespacing and creating a base controller.</p>

<p>Example 4:</p>

<p>``` ruby
class Reports::BaseController &lt; ActionController::Base
  # methods for all reports
end</p>

<p>class Reports::StandardController &lt; Reports::BaseController
  # other methods
end</p>

<p>class Reports::CustomController &lt; Reports::BaseController
  # other methods
end
```</p>

<p>This is nothing groundbreaking or revolutionary. But like many things in ruby and Rails, simple and basic saves the day.</p>
]]></content>
  </entry>
  
</feed>
